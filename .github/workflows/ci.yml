name: CI

on: push

jobs:
  package:
    name: Create app bundle
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - run: mkdir -p dist
      - run: >
            tar 
            --exclude process_flow_diagram_app/appserver/static/visualizations/process_flow_diagram/node_modules 
            --exclude process_flow_diagram_app/local 
            -zcvf 
            dist/app.tgz 
            process_flow_diagram_app

      - uses: actions/upload-artifact@v2
        with:
          name: bundle
          path: dist/app.tgz
  appinspect-cli:
    needs: package
    name: AppInspect CLI Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install dependencies
        run: |
          sudo apt-get install libxml2-dev libxslt1-dev
          python -m pip install http://download.splunk.com/misc/appinspect/splunk-appinspect-latest.tar.gz
      - name: Run AppInspect
        run: |
          splunk-appinspect inspect process_flow_diagram_app --output-file appinspect.json
          exit `cat appinspect.json | jq '.summary.failure'`
  appinspect-api:
    needs: package
    name: AppInspect API Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - run: mkdir -p dist
      - uses: actions/download-artifact@v2
        with:
          name: bundle
          path: dist/

      - name: AppInspect action
        env:
          SPLUNK_USER: ${{ secrets.SPLUNK_USER }}
          SPLUNK_PASS: ${{ secrets.SPLUNK_PASS }}
        with:
          app-bundle: dist/app.tgz
          report-path: dist
        uses: ./.github/actions/appinspect

      - uses: actions/upload-artifact@v2
        with:
          name: report
          path: dist/report.html
  prep_release:
    needs: [package,appinspect-cli,appinspect-api]
    runs-on: ubuntu-latest
    name: Draft Release
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Extract Tag
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - run: mkdir -p dist
      - uses: actions/download-artifact@v2
        with:
          name: bundle
          path: dist/
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.vars.outputs.tag }}
          draft: true
          prerelease: true

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./dist/app.tgz
          asset_name: process_flow_diagram_app_${{ steps.vars.outputs.tag }}.tgz
          asset_content_type: application/gzip
